# ============================================================================
# CODERABBIT CONFIGURATION - STATJAM PROJECT
# ============================================================================
# Purpose: AI-powered code review aligned with .cursorrules standards
# Enforces: Enterprise-grade code quality and senior engineer audit standards
# ============================================================================

# ========================================
# REVIEW CONFIGURATION
# ========================================
reviews:
  # Enable automatic reviews on all PRs
  auto_review: true
  
  # Review thoroughness level
  level: "thorough"
  
  # Focus areas aligned with StatJam standards
  focus:
    - security              # Maintain A- security rating
    - performance          # Optimize for production workloads
    - best_practices       # Follow industry standards
    - maintainability      # Ensure long-term code health
    - typescript_issues    # Strict TypeScript enforcement
    - react_patterns       # Modern React best practices
    - accessibility        # WCAG compliance preparation
    
  # Custom rules aligned with .cursorrules
  rules:
    # ========================================
    # FILE SIZE LIMITS (.cursorrules Rule 1)
    # ========================================
    - name: "File Size Limit - Hard Block"
      pattern: "**/*.{ts,tsx,js,jsx}"
      max_lines: 500
      severity: "error"
      message: "‚ùå BLOCKED: File exceeds 500 line limit per .cursorrules. MUST split into multiple files."
      
    # ========================================
    # COMPONENT SIZE LIMITS (.cursorrules Rule 2)
    # ========================================
    - name: "React Component Size Limit"
      pattern: "**/components/**/*.tsx"
      max_lines: 200
      severity: "error"
      message: "‚ùå BLOCKED: Component exceeds 200 line limit per .cursorrules. Split into smaller components."
      
    - name: "Page Component Size Limit"
      pattern: "**/app/**/*.tsx"
      max_lines: 200
      severity: "error"
      message: "‚ùå BLOCKED: Page component exceeds 200 line limit per .cursorrules. Extract logic to hooks/services."
      
    # ========================================
    # HOOK SIZE LIMITS (.cursorrules Rule 3)
    # ========================================
    - name: "Custom Hook Size Limit"
      pattern: "**/hooks/**/*.{ts,tsx}"
      max_lines: 100
      severity: "error"
      message: "‚ùå BLOCKED: Hook exceeds 100 line limit per .cursorrules. Split into focused hooks."
      
    # ========================================
    # FUNCTION SIZE LIMITS (.cursorrules Rule 4)
    # ========================================
    - name: "Function Size Limit"
      pattern: "**/*.{ts,tsx,js,jsx}"
      max_function_lines: 40
      severity: "warning"
      message: "‚ö†Ô∏è Function exceeds 40 line limit per .cursorrules. Consider breaking into smaller functions."
      
    # ========================================
    # NAMING CONVENTIONS (.cursorrules Rule 6)
    # ========================================
    - name: "Banned Identifier Names"
      pattern: "**/*.{ts,tsx,js,jsx}"
      banned_names:
        - "data"
        - "info" 
        - "helper"
        - "temp"
        - "obj"
        - "item"
        - "element"
        - "thing"
      severity: "error"
      message: "‚ùå BLOCKED: Vague identifier name detected. Use intention-revealing names per .cursorrules."
      
    # ========================================
    # SEPARATION OF CONCERNS (.cursorrules Rule 5)
    # ========================================
    - name: "Business Logic in Components"
      pattern: "**/components/**/*.tsx"
      detect_business_logic: true
      severity: "warning"
      message: "‚ö†Ô∏è Business logic detected in component. Move to services/ or hooks/ per .cursorrules."
      
    # ========================================
    # SECURITY PATTERNS
    # ========================================
    - name: "Hardcoded Secrets Detection"
      pattern: "**/*.{ts,tsx,js,jsx}"
      detect_secrets: true
      severity: "error"
      message: "üîí SECURITY: Potential hardcoded secret detected. Use environment variables."
      
    - name: "XSS Prevention"
      pattern: "**/*.{ts,tsx}"
      detect_xss_patterns: true
      severity: "error"
      message: "üîí SECURITY: Potential XSS vulnerability. Sanitize user inputs with DOMPurify."

# ========================================
# FILE IGNORE PATTERNS
# ========================================
ignore:
  # Documentation and config files
  - "*.md"
  - "*.json"
  - "*.yml"
  - "*.yaml"
  
  # Generated files
  - "package-lock.json"
  - "node_modules/**"
  - ".next/**"
  - "dist/**"
  - "build/**"
  
  # Legacy/archive files
  - "archive/**"
  - "**/archive/**"
  - "docs/08-archive/**"
  
  # Test files (when added)
  - "**/*.test.{ts,tsx,js,jsx}"
  - "**/*.spec.{ts,tsx,js,jsx}"
  - "**/tests/**"
  
  # Configuration files
  - "tailwind.config.ts"
  - "next.config.ts"
  - "eslint.config.mjs"
  - "tsconfig.json"

# ========================================
# INTEGRATION SETTINGS
# ========================================
integrations:
  github:
    # Enable comprehensive PR feedback
    pr_comments: true
    inline_comments: true
    summary_comments: true
    
    # Auto-approve simple dependency updates
    auto_approve:
      - pattern: "deps: update"
        conditions:
          - "no_breaking_changes"
          - "passes_all_checks"
    
    # Labels for organization
    labels:
      add_on_review:
        - "code-review"
        - "needs-attention"
      
      remove_on_approval:
        - "needs-attention"

# ========================================
# CUSTOM CHECKS FOR STATJAM
# ========================================
custom_checks:
  # ========================================
  # SUPABASE PATTERNS
  # ========================================
  - name: "Supabase Client Usage"
    description: "Ensure proper Supabase client usage patterns"
    pattern: "**/*.{ts,tsx}"
    rules:
      - detect: "supabase.from("
        suggest: "Use makeRequest() for V3 services or proper error handling"
        severity: "info"
  
  # ========================================
  # REACT PATTERNS
  # ========================================
  - name: "React Hook Dependencies"
    description: "Check useEffect and useCallback dependencies"
    pattern: "**/*.{ts,tsx}"
    rules:
      - detect: "useEffect|useCallback|useMemo"
        check: "dependency_array_completeness"
        severity: "warning"
  
  # ========================================
  # TYPESCRIPT PATTERNS
  # ========================================
  - name: "TypeScript Strictness"
    description: "Enforce strict TypeScript usage"
    pattern: "**/*.{ts,tsx}"
    rules:
      - detect: "any"
        message: "Avoid 'any' type. Use specific types or 'unknown'"
        severity: "warning"
      - detect: "// @ts-ignore"
        message: "Avoid @ts-ignore. Fix the underlying TypeScript issue"
        severity: "error"

# ========================================
# PERFORMANCE MONITORING
# ========================================
performance:
  # Monitor bundle size impact
  bundle_size:
    warn_threshold: "100kb"
    error_threshold: "500kb"
  
  # Check for performance anti-patterns
  patterns:
    - name: "Expensive Operations in Render"
      detect: "expensive_render_operations"
      severity: "warning"
    
    - name: "Missing React.memo"
      detect: "heavy_components_without_memo"
      severity: "info"

# ========================================
# LEARNING MODE
# ========================================
learning:
  # Enable suggestions for modern patterns
  suggest_modern_patterns: true
  
  # Provide educational context
  explain_suggestions: true
  
  # Track improvement over time
  track_metrics: true

# ========================================
# CONFIGURATION NOTES
# ========================================
# This configuration is specifically tuned for StatJam's:
# 1. .cursorrules enforcement (file/component/function size limits)
# 2. Security standards (A- rating maintenance)
# 3. Enterprise-grade code quality requirements
# 4. Next.js + Supabase + TypeScript stack
# 5. Solo developer workflow optimization
#
# Expected behavior:
# - Strict enforcement of .cursorrules standards
# - Security vulnerability detection
# - Performance optimization suggestions
# - Modern React/TypeScript pattern recommendations
# - Minimal false positives due to clean codebase
#
# Tuning recommendations:
# - Monitor first 2 weeks for false positives
# - Adjust severity levels based on team preferences
# - Add project-specific patterns as they emerge
# ========================================
